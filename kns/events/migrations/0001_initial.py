# Generated by Django 5.1 on 2024-10-17 08:45

import uuid

import cloudinary.models
import django.core.validators
import django.db.models.deletion
import django_countries.fields
import taggit.managers
import tinymce.models
from django.db import migrations, models

import kns.events.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("profiles", "0009_alter_consentform_reject_reason_and_more"),
        (
            "taggit",
            "0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx",
        ),
    ]

    operations = [
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "location_country",
                    django_countries.fields.CountryField(
                        blank=True, max_length=2, null=True
                    ),
                ),
                (
                    "location_city",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("published", "Published"),
                            ("archived", "Archived"),
                        ],
                        default="published",
                        max_length=10,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        max_length=70,
                        validators=[
                            django.core.validators.MinLengthValidator(
                                15, message="Event title must be at least 15 characters"
                            ),
                            django.core.validators.MaxLengthValidator(
                                135,
                                message="Event title must be no more than 135 characters",
                            ),
                        ],
                    ),
                ),
                (
                    "summary",
                    models.TextField(
                        default="",
                        validators=[
                            django.core.validators.MinLengthValidator(
                                135, message="Summary must be at least 135 characters"
                            ),
                            django.core.validators.MaxLengthValidator(
                                300,
                                message="Summary must be no more than 300 characters",
                            ),
                        ],
                    ),
                ),
                (
                    "cancel_reason",
                    models.TextField(
                        blank=True,
                        default="",
                        null=True,
                        validators=[
                            django.core.validators.MinLengthValidator(
                                135,
                                message="Reason for cancelling must be at least 135 characters",
                            ),
                            django.core.validators.MaxLengthValidator(
                                300,
                                message="Reason for cancelling must be no more than 300 characters",
                            ),
                        ],
                    ),
                ),
                ("description", tinymce.models.HTMLField()),
                (
                    "slug",
                    models.SlugField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("start_date", models.DateField()),
                ("end_date", models.DateField(blank=True, null=True)),
                ("registration_deadline_date", models.DateField(blank=True, null=True)),
                ("refreshments", models.BooleanField(default=False)),
                ("accommodation", models.BooleanField(default=False)),
                ("event_contact_name", models.CharField(max_length=50)),
                ("event_contact_email", models.EmailField(blank=True, max_length=254)),
                (
                    "registration_limit",
                    models.PositiveIntegerField(
                        default=50,
                        validators=[
                            django.core.validators.MinValueValidator(
                                1,
                                message="Registration limit must be a positive integer.",
                            )
                        ],
                    ),
                ),
                ("archived_at", models.DateField(blank=True, null=True)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="events_organized",
                        to="profiles.profile",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "image",
                    cloudinary.models.CloudinaryField(
                        blank=True,
                        max_length=255,
                        null=True,
                        validators=[kns.events.models.validate_image],
                    ),
                ),
                ("caption", models.TextField(blank=True, null=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="galleries",
                        to="events.event",
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["start_date"], name="events_even_start_d_d4b514_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["end_date"], name="events_even_end_dat_ef2904_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(fields=["slug"], name="events_even_slug_30eb0f_idx"),
        ),
        migrations.AddConstraint(
            model_name="event",
            constraint=models.CheckConstraint(
                condition=models.Q(("end_date__gte", models.F("start_date"))),
                name="end_date_after_start_date",
            ),
        ),
    ]
